Target Locators:
----------------

Window / Tab
================
-Window handling in Selenium refers to the process of 
managing multiple browser windows or tabs during test automation.
-It allows you to switch the focus of the WebDriver to 
different windows or tabs, interact with their content, 
and perform actions within each window or tab.
- Window or Tab is technically same
- Window / Tab -> URL / browser controls.

C43B89A7280850BC71458E76008F64FE
FA8ED917A46E3F150C369820BB828DA3

Challenges

- Window URL / Title / Sequence Number can change
- So, how to find the window uniquely?

Selenium Way

- Every new window -> tag it -> new WindowHandle -> String (unique)


Exception

NoSuchWindowException

Close and Quit

How to swtitch to a new window ?

- getWindowHandles()
- Convert Set to List
- Pick the particular window using get(index)
- Switch to the window using the handle
- Close or Quit

open window will be closed by driver.close();
To close all the open window driver.quit();

How to switch to a new window:
-------------------------------
1.how to get the reference?
-getWindowHandle()---when ever u open the window
to get currrent window reference

-getWindowHandles()--to get the reference of all window open

2.How to switch the control
getWindowHandles() return as a Set--remove the duplication

create a list

Two window get()

driver.switch().window(lstname.get(0))

convert set into list

pick the particular window using get(index)

apply the driver.switch().window(lstname.get(0))

close/quit



Class Room 3:
Navigate to https://www.irctc.co.in/
Click on FLIGHTS link
Switch to the Flights window
Print the Title of the Flights window
Close the Flights window alone
Print the Train search window title (First window)

SnapShot:
=========
a snapshot (or screenshot) refers to capturing an image of the current state of a web page 
or a specific element on the page.

Taking snapshots can be helpful for various purposes, 
---debugging
---error reporting
---generating test evidence.

To capture a snapshot in Selenium Java,
you can use the TakesScreenshot interface provided by Selenium WebDriver.

The getScreenshotAs method is called to capture the screenshot 
as a byte array (OutputType.BYTES), 
which you can further process or save to a file using libraries like Apache Commons IO.

Taking snapshots:
can help you troubleshoot issues, verify expected states,
and provide visual evidence of test execution.

                 //Take a snapshot
		Step1:		File source = driver.getScreenshotAs(OutputType.FILE);
				//Create folder to save the img file
		Step2:		File dest =new File("./snap/img1.png");
				//Merge source and destination
		Step3:		FileUtils.copyFile(source, dest);

Ensure that you have the Apache Commons IO library added to your project dependencies
to use the FileUtils class for file operations.






==================================================================
Wait -> to address timing difference between the script & application
	    to make the script and application in sync
		
Selenium Wait:
---------------
1. Implicitly Wait 
2. Explicitly Wait		

Java Wait: (Explicit Wait)
-----------
Thread.sleep(time) -> It will slow down the execution
					  This has to be applied wherever needed
					  It will wait till the end of the time limit
					-sometimes immediately
                    -sometimes may take longer

best approach:Interact as soon as ready

FluentWait(super class)//dynamic

WebDriverWait(sub class)//static 20	

solution:every 500 ms (polling interval) the code will go and check if the expected condition
is met or not.

if it is met--> perform the action
not met-->sleep for another500ms before poll again 20

after crossing the max time-->it throw Exception TimeoutException				
					  
					  
Implicitly Wait:
-----------------
-driver.manage().timeout().implicitlyWait(Duration.ofSeconds(30));
- Its a common wait for all the locators in my script (findElement & findElements)			
- It is used to avoid the NoSuchElementException when the element is loaded little late
- If the element is loaded within the given time limit, it will locate element immediately and 
  proceed with next step in the script
- If the element is not loaded within the given time limit, it will throw NoSuchElementException
findElements--->empty list
- Best practice is, apply ImplicitlyWait at the starting of your script

Explicit Wait
=============
When you like to wait for element behaviour!!

The explicit wait waits for a specific condition to be met within a defined timeout period.

Once the condition is met the script either proceeds to the next step

The timeout is reached--->throws an exception if the condition is not satisfied within the specified time.

web pages may not load instantly,or certain elements may take some time
to become visible or interactive.

When writing automation scripts,it is essential to wait for these elements
to be present or to meet specific conditions before performing action. 
1.to become clickable
2.element to become visible
3.element to become enable
4.alert to appear
5.window to appear

ClassRoom:
Load the url:https://leafground.com/waits.xhtml
Wait for Invisibility (1 - 10 Sec)



 